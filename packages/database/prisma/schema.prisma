// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String  
  name     String?
  role     Role
  profile   UserProfile?

  @@index([role])
}

model UserProfile {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  avatarUrl   String? //String di URLs su S3 
  preferences Json? //Riferimento a sezione NOTIFICHE del Componente Profio

  coworkingVenue   CoworkingVenue? @relation(fields: [coworkingVenueId], references: [id])
  coworkingVenueId Int?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) //Idea: Sezione Profilo "Sei Nostro Cliente da..."/"Data Iscrizione...." . Comuqnue utile per Analisi db
  updatedAt DateTime @updatedAt //Idea: "Data Ultima Modifica" Su Sezione Profilo. Utile per Behavior Insight Su db

  @@index([coworkingVenueId])
  @@index([createdAt])
}

//Enum per USER
enum Role {
  USER
  HOST
}

//Modelli Componenti Locale, Pacchetti e Piani

model CoworkingVenue {
  id           Int           @id @default(autoincrement())
  name         String
  address      String        @db.VarChar(200)
  openingHours OpeningHour[]
  services     String[]
  description  String?        @db.VarChar(200)
  photos       String[] //URLs di S3
  packages     Package[] //1 Locale ha tanti pacchetti
  UserProfile  UserProfile[]
  closingPeriods ClosingPeriod[]
  avatarURL  String?

  @@index([name])
}

model Package {
  id               Int             @id @default(autoincrement())
  title            String          @db.VarChar(200)
  description      String?         @db.VarChar(200)
  squareMetres     Int
  capacity         Int
  services         String[]
  type             typeCoworking //Può essere 1 di questi 3 typeCoworking
  plans            Plan[] //Un pacchetto può avere + Piani = Orario, Giornaliero, Settimanale, Mensile ed Annuale
  photos           String[] //Array di URLs S3
  CoworkingVenue   CoworkingVenue? @relation(fields: [coworkingVenueId], references: [id])
  coworkingVenueId Int?

  @@index([coworkingVenueId])
  @@index([type])
  @@index([capacity])
}

model Plan {
  id        Int       @id @default(autoincrement())
  name      String
  rate      PlansRate
  price     Int
  isEnabled Boolean   @default(false)
  package   Package   @relation(fields: [packageId], references: [id])
  packageId Int

  @@index([packageId, isEnabled])
  @@index([packageId])
  @@index([price])
  @@unique([packageId, name, rate])
}

enum PlansRate {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum typeCoworking {
  SALA
  DESK
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model OpeningHour {
  id       Int             @id @default(autoincrement())
  day      WeekDay       
  isClosed Boolean         @default(false)
  venue    CoworkingVenue  @relation(fields: [venueId], references: [id])
  venueId  Int
  periods  OpeningPeriod[]

  @@index([venueId])
  @@unique([venueId, day])
}

model OpeningPeriod {
  id            Int         @id @default(autoincrement())
  start         String
  end           String
  openingHour   OpeningHour @relation(fields: [openingHourId], references: [id])
  openingHourId Int

  @@index([openingHourId])
  @@index([openingHourId, start, end])
}

model ClosingPeriod {
  id Int @id @default(autoincrement())
  start DateTime
  end DateTime
  venue CoworkingVenue @relation(fields: [venueId], references: [id])
  venueId Int
  isClosed Boolean  @default(true)

  @@index([venueId])
  @@index([venueId, start, end])
}

model PaymentInfo {

  id Int @id @default(autoincrement())
  companyName String
  address String
  iban String @unique @db.VarChar(34)
  bicSwift String @db.VarChar(11)
  countryCode CountryCode
  currencyCode CurrencyCode

  @@index([currencyCode])
  @@index([countryCode]) 
  //Grandi enum richiedono Indici
}

enum CountryCode {
  AD // Andorra
  AL // Albania
  AM // Armenia
  AT // Austria
  AZ // Azerbaigian
  BA // Bosnia ed Erzegovina
  BE // Belgio
  BG // Bulgaria
  BY // Bielorussia
  CH // Svizzera
  CY // Cipro
  CZ // Repubblica Ceca
  DE // Germania
  DK // Danimarca
  EE // Estonia
  ES // Spagna
  FI // Finlandia
  FR // Francia
  GB // Regno Unito
  GE // Georgia
  GR // Grecia (codice ISO: GR, non EL)
  HR // Croazia
  HU // Ungheria
  IE // Irlanda
  IS // Islanda
  IT // Italia
  LI // Liechtenstein
  LT // Lituania
  LU // Lussemburgo
  LV // Lettonia
  MC // Monaco
  MD // Moldavia
  ME // Montenegro
  MK // Macedonia del Nord
  MT // Malta
  NL // Paesi Bassi
  NO // Norvegia
  PL // Polonia
  PT // Portogallo
  RO // Romania
  RS // Serbia
  RU // Russia
  SE // Svezia
  SI // Slovenia
  SK // Slovacchia
  SM // San Marino
  TR // Turchia
  UA // Ucraina
  VA // Città del Vaticano
}

enum CurrencyCode {
  EUR // Euro
  ALL // Lek albanese
  AMD // Dram armeno
  AZN // Manat azero
  BAM // Marco convertibile bosniaco
  BGN // Lev bulgaro
  BYN // Rublo bielorusso
  CHF // Franco svizzero
  CZK // Corona ceca
  DKK // Corona danese
  GEL // Lari georgiano
  GBP // Sterlina britannica
  HUF // Fiorino ungherese
  ISK // Corona islandese
  MDL // Leu moldavo
  MKD // Denar macedone
  NOK // Corona norvegese
  PLN // Zloty polacco
  RON // Leu rumeno
  RUB // Rublo russo
  RSD // Dinaro serbo
  SEK // Corona svedese
  TRY // Lira turca
  UAH // Grivnia ucraina
}

//Si, non ha tanto Senso avere tutti questi Codici per Nazioni e Valuta, Ma possiamo sempre levarli.
//Vedila come un'augurio che Nibol arrivi dovunque