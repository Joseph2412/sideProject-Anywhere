// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String  
  firstName   String
  lastName    String
  avatarUrl   String? //String di URLs su S3 
  preferences Json? //Riferimento a sezione NOTIFICHE del Componente Profio


  venue   Venue? @relation(fields: [venueId], references: [id])//Coworking Collegato ad utente 
  venueId Int? @unique

  role     Role
  
  resetToken String? // Token per il reset della password
  resetTokenExpires DateTime? // Data di scadenza del token
  
  createdAt DateTime @default(now()) //Idea: Sezione Profilo "Sei Nostro Cliente da..."/"Data Iscrizione...." . Comuqnue utile per Analisi db
  updatedAt DateTime @updatedAt //Idea: "Data Ultima Modifica" Su Sezione Profilo. Utile per Behavior Insight Su db
  
  @@index([createdAt])
}


//Enum per USER
enum Role {
  USER
  HOST
}

//Modelli Componenti Locale, Pacchetti e Piani

model Venue {
  id           Int           @id @default(autoincrement())
  name         String
  address      String        @db.VarChar(200)
  services     String[]
  description  String?        @db.VarChar(200)
  photos       String[] //URLs di S3
  packages     Package[] //1 Locale ha tanti pacchetti
  closingPeriods ClosingPeriod[]
  logoURL  String?
  openingDays OpenDays[]
  paymentInfo PaymentInfo?

  user User? //Senza questa Prisma mi da errore. Se provo ad eliminarlo mi ritorna
  //Error validating field `venue` in model `User`: The relation field `venue` on model `User` is missing an opposite relation field on the model `Venue`. Either run `prisma format` or add it manually.Prisma

  @@index([name])
}

model OpenDays {
  id       Int             @id @default(autoincrement())
  day      WeekDay       
  isClosed Boolean         @default(false)
  periods  String[]        // Array di stringhe: ["09:00-12:00", "14:00-18:00"] 
  venue    Venue  @relation(fields: [venueId], references: [id])
  venueId  Int
  
  @@index([venueId])
  @@unique([venueId, day])
}

model Package {
  id               Int             @id @default(autoincrement())
  title            String          @db.VarChar(200)
  description      String?         @db.VarChar(200)
  squareMetres     Int?
  capacity         Int?
  seats            Int?
  services         String[]
  type             typeCoworking //Può essere 1 di questi 2 typeCoworking
  plans            PackagePlan[] //Un pacchetto può avere + Piani = Orario, Giornaliero, Settimanale, Mensile ed Annuale
  photos           String[] //Array di URLs S3
  venue           Venue? @relation(fields: [venueId], references: [id])
  venueId       Int?

  @@index([venueId])
  @@index([type])
  @@index([capacity])
}

model PackagePlan {
  id        Int       @id @default(autoincrement())
  name      String
  rate      PlansRate
  price     Int
  isEnabled Boolean   @default(false)
  package   Package   @relation(fields: [packageId], references: [id])
  packageId Int

  @@index([packageId, isEnabled])
  @@index([packageId])
  @@index([price])
  @@unique([packageId, name, rate])
}

enum PlansRate {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum typeCoworking {
  SALA
  DESK
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}


model ClosingPeriod {
  id Int @id @default(autoincrement())
  start DateTime?
  end DateTime?
  venue Venue @relation(fields: [venueId], references: [id])
  venueId Int

  @@index([venueId])
  @@index([venueId, start, end])
  @@unique([venueId, start, end])
}

model PaymentInfo {

  id Int @id @default(autoincrement())
  companyName String
  address String
  iban String? @db.VarChar(34)
  bicSwift String @db.VarChar(11)
  countryCode String @db.VarChar(3) //ISO 3166-1 alpha-2 code
  currencyCode String @db.VarChar(3) //ISO 4217 code
  venue Venue @relation(fields: [venueId], references: [id])
  venueId Int @unique

}

